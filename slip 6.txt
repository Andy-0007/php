book.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<bookstore> 
 
  <book category="cooking"> 
    <title lang="en">Everyday Italian</title> 
    <author>Giada De Laurentiis</author> 
    <year>2005</year> 
    <price>30.00</price> 
  </book> 
 
  <book category="children"> 
    <title lang="en">Harry Potter</title> 
    <author>J K. Rowling</author> 
    <year>2005</year> 
    <price>29.99</price> 
  </book> 
 
  <book category="web"> 
    <title lang="en">XQuery Kick Start</title> 
    <author>James McGovern</author> 
    <author>Per Bothner</author> 
    <author>Kurt Cagle</author> 
    <author>James Linn</author> 
    <author>Vaidyanathan Nagarajan</author> 
    <year>2003</year> 
    <price>49.99</price> 
  </book> 
 
  <book category="web" cover="paperback"> 
    <title lang="en">Learning XML</title> 
    <author>Erik T. Ray</author> 
    <year>2003</year> 
    <price>39.95</price> 
  </book> 
</bookstore> 
 


 
book.php 
 
<?php 
$xml=simplexml_load_file("book.xml") or die("Error: Cannot create object"); 
 
echo "<h1 align=center> Books Information </h1>"; 
echo "<table border=2>"; 
echo    "<tr> <th> Book Category </th> 
              <th> Book Language </th> 
              <th> Book Title </th> 
              <th> Book Author </th> 
              <th> Book Year </th> 
              <th> Book Price </th> 
        </tr>"; 
 
foreach($xml->children() as $books) 
{ 
    $category = $books['category']; 
    $language = $books->title['lang']; 
    
 
    echo "<tr>  <td>$category </td> 
                <td>$language </td> 
                <td>$books->title </td> 
                <td>$books->author </td> 
                <td>$books->year </td> 
                <td>$books->price</td> 
            </tr>"; 
    
} 
 
 
 
 
 








import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

# Create the dataset
TID = {
    1: ["bread", "milk"],
    2: ["bread", "diaper", "beer", "eggs"],
    3: ["milk", "diaper", "beer", "coke"],
    4: ["bread", "milk", "diaper", "beer"],
    5: ["bread", "milk", "diaper", "coke"]
}

# Prepare transactions list
transactions = []
for key, value in TID.items():
    transactions.append(value)

# Convert categorical values into numeric format
te = TransactionEncoder()
te_ary = te.fit_transform(transactions)
df = pd.DataFrame(te_ary, columns=te.columns_)

# Apply the apriori algorithm with different min_support values
min_sup_values = [0.2, 0.4, 0.6]
for min_sup in min_sup_values:
    frequent_itemsets = apriori(df, min_support=min_sup, use_colnames=True)
    
    # Generate association rules
    rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.7)
    
    # Print results
    print("Min_sup:", min_sup)
    print("Frequent Itemsets:")
    print(frequent_itemsets)
    print("Association Rules:")
    print(rules)
    print("\n")
