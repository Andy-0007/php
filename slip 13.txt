//html
<html>
<body>
<label for="nameInput">Enter your name:</label>
<input type="text" id="nameInput">
<p id="response">Stranger, please tell me your name!</p>
<script>
document.addEventListener('DOMContentLoaded', function() {
  var nameInput = document.getElementById('nameInput');
  var responseElement = document.getElementById('response');

  function checkName() {
    var name = nameInput.value.trim();

    if (name === '') {
      responseElement.textContent = 'Stranger, please tell me your name!';
      return;
    }
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '1.php', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4 && xhr.status === 200) {
        responseElement.textContent = xhr.responseText;
      }
    };
    xhr.send('name=' + encodeURIComponent(name));
  }
  nameInput.addEventListener('input', function() {
    checkName();
  });
});
</script>

</body>
</html>

//1.php
<?php
if (isset($_POST['name'])) {
    $name = $_POST['name'];

    if (empty($name)) {
        echo 'Stranger, please tell me your name!';
    } elseif (in_array($name, ['Rohit', 'Virat', 'Dhoni', 'Ashwin', 'Harbhajan'])) {
        echo 'Hello, master!';
    } else {
        echo "I don't know you!";
    }
} else {
    echo 'Invalid request';
}
?>



















import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the dataset
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/nursery/nursery.data'
names = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health', 'class']
dataset = pd.read_csv(url, names=names)

# Identify independent and target variables
X = dataset.drop('class', axis=1)
Y = dataset['class']

# Convert categorical variables into numerical variables using one-hot encoding
X = pd.get_dummies(X)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Build a linear regression model
Model = LinearRegression()
Model.fit(X_train, y_train)

# Print the coefficients of the model
print("Intercept:", Model.intercept_)
print("Coefficients:", Model.coef_)

# Predict the target variable for the testing set
Y_pred = Model.predict(X_test)

# Evaluate the model using Mean Squared Error (MSE)
MSE = np.mean((y_test - Y_pred) ** 2)
print("MSE:", MSE)
